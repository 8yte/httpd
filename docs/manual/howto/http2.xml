<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE manualpage SYSTEM "../style/manualpage.dtd">
<?xml-stylesheet type="text/xsl" href="../style/manual.en.xsl"?>

<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<manualpage metafile="public_html.xml.meta">
<parentdocument href="./">How-To / Tutorials</parentdocument>

  <title>HTTP/2 guide</title>

  <summary>
    <p>This is the howto guide for the HTTP/2 implementation in Apache httpd. This
    feature is <em>experimental</em> and you may expect interfaces and directives to
    change between releases.
    </p>
  </summary>
  <seealso><a href="../mod/mod_http2.html">mod_http2</a></seealso>

  <section id="protocol">
    <title>The HTTP/2 protocol</title>
    <p>The HTTP/2 protocol offers an excellent documentation and we strongly suggest to check the following links before proceeding:</p>
    <dl>
      <dt><a href="http://httpwg.org/specs/rfc7540.html">RFC 7540</a></dt>
      <dd>The Hypertext Transfer Protocol version 2 - very dense of information but also really nice for newcomers.</dd>
      <dt><a href="https://http2.github.io/faq/">HTTP/2 FAQ</a></dt>
      <dd>A lot of answers to common questions about the HTTP/2 protocol.</dd>
      <dt><a href="http://httpwg.org/specs/rfc7541.html">RFC 7541</a></dt>
      <dd>HPACK, the header compression specification for HTTP/2</dd>
    </dl>
    <p>There are some new terms and gotchas that need to be kept in mind while reading this document:</p>
    <ul>
      <li>HTTP/2 is a <strong>binary protocol</strong>, as opposed to HTTP 1.1 that is plain text. The latter is meant to be human readable (for example sniffing network traffic) meanwhile the former is not. More info in the official FAQ <a href="https://http2.github.io/faq/#why-is-http2-binary">question</a>.</li>
      <li><strong>h2</strong> is HTTP/2 over TLS (protocol negotiation via ALPN).</li>
      <li><strong>h2c</strong> is HTTP/2 over TCP.</li>
      <li>A <strong>frame</strong> is the smallest unit of communication within an HTTP/2 connection, consisting of a header and a variable-length sequence of octets structured according to the frame type. More info in the official documentation <a href="http://httpwg.org/specs/rfc7540.html#FramingLayer"> section</a>.</li>
      <li>A <strong>stream</strong> is a bidirectional flow of frames within the HTTP/2 connection. The correspondent concept in HTTP 1.1 is a request/response message exchange. More info in the official documentation <a href="http://httpwg.org/specs/rfc7540.html#StreamsLayer"> section</a></li>
      <li>HTTP/2 is able to run <strong>multiple streams</strong> of data over the same TCP connection, avoiding the classic HTTP 1.1 head of blocking slow request and avoiding to re-instantiate TCP connections for each request/response (KeepAlive patched the problem in HTTP 1.1 but did not fully solve it).</li>
      <li>TODO: header compression.</li>
      <li>TODO: more!</li>
    </ul>
  </section>

  <section id="implementation">
    <title>HTTP/2 in Apache httpd</title>
    <p>The HTTP/2 protocol is implemented by its own httpd module, aptly named
    <a href="../mod/mod_http2.html">mod_http2</a>. It implements the complete set
    of features described by RFC 7540 and supports HTTP/2 over cleartext (http:), as
    well as secure (https:) connections. The cleartext variant is named '<code>h2c</code>', 
    the secure one '<code>h2</code>'. For <code>h2c</code> it allows the <em>direct</em>
    mode and the <code>Upgrade:</code> via an initial HTTP/1 request.</p>
    <p>One feature of HTTP/2 that offers new capabilities for web developers is
    <a href="#push">Server Push</a>. See that section on how your web application
    can make use of it.</p>
  </section>
  
  <section id="building">
    <title>Build httpd with HTTP/2 support</title>
    <p>Building a httpd release is described in <a href="//docs/current/install.html">this document</a> and it involves adding parameters to a <code>configure</code> script. The ones specific for HTTP/2 are:</p>
    <dl>
      <dt>--enable-http2</dt>
      <dd>This enables the module 'http2' which does implement the HTTP/2 protocol.</dd>
      <dt>--with-nghttp2=dir</dt>
      <dd>This specifies a non-standard location for the library <a href="https://nghttp2.org/">libnghttp2</a> which is necessary for the http2 module. If nghttp2 is in a standard place, the configure process will pick it up automatically.</dd>
      <dt>--enable-nghttp2-staticlib-deps</dt>
      <dd>Ultra-rarely needed option used to statically link the nghttp2 library to the server. On most platforms, this only has an effect when there is no shared nghttp2 library to be found.</dd>
    </dl>
    <p>The instructions to build <a href="https://nghttp2.org/">libnghttp2</a> from the sources (if needed) are described in the related page.</p>
    <p>An up to date TLS library that implements ALPN is needed to negotiate the <code>h2</code> protocol (secure variant of HTTP/2, please check above for more info). OpenSSL fully supports ALPN from <code>1.0.2</code> onwards.</p>
  </section>

  <section id="protocol-configuration">
    <title>Protocol Configuration</title>
    <p>This section should contain various configuration examples for HTTP/2 (h2, h2c, etc..) plus common pitfalls (for example not setting a strong TLS cipher suite with h2).</p>
    
    <p>The first thing to do is to load the mod_http2 module and to enable some basic logging:</p>
    <highlight language="config">
# Load the http2 module
LoadModule http2_module modules/mod_http2.so

# Enable basic logging for the http2 module
&lt;IfModule http2_module&gt;
  LogLevel http2:info
&lt;/IfModule&gt;
    </highlight>
    <p>Before reading the next sections please think about the following questions:</p>
    <ul>
      <li>Is HTTP/2 support needed at server level or only in a specific VirtualHost?</li>
      <li>Is HTTP/2 support needed for secure (<code>h2</code>) and insecure (<code>h2c</code>) connections or only the former?</li>
    </ul>
    <section><title>Server wide</title>
    <p>In order to simply add HTTP/2 support at server level for secure/insecure connections the following config is sufficient:</p>
    <highlight language="config">
# Enable HTTP/2 and HTTP 1.1
Protocols h2 h2c http/1.1
    </highlight>
    <p>Detailed list of things that will be enabled by this configuration:</p>
    <ul>
      <li>HTTP/2 negotiation (h2) via TLS ALPN for secure <directive>VirtualHost</directive>.</li>
      <li>HTTP/2 cleartext negotiation (h2c) upgrading from an initial HTTP/1.1 connection or via HTTP/2 preamble checking (Direct mode, see <directive module="mod_http2">H2Direct</directive>).</li>
    </ul>
    <p>Something to notice is the difference in the protocol negotiation between <code>h2</code> and <code>h2c</code>: the former uses the TLS ALPN extensions meanwhile the latter requires to establish a HTTP 1.1 connection first and then Upgrade it to HTTP/2 (this step is handled transparently by the httpd server - websockets use the same procedure too).</p>
  </section>

  <section><title>Secure VirtualHost only</title>
    <p>A very common scenario is enabling HTTP/2 only for a secure <directive>VirtualHost</directive>, leaving HTTP 1.1 for insecure connections:</p>
    <highlight language="config">
# Enable HTTP/2 and HTTP 1.1
Protocols h2 http/1.1

&lt;VirtualHost *:443&gt;
  # [...] refers to content truncated
  SSLCipherSuite ECDHE-RSA-AES128-GCM-SHA256:[...]
  SSLHonorCipherOrder on
  SSLCertificateFile &lt;path&gt;
  SSLCertificateKeyFile &lt;path&gt;
  [...]
&lt;/VirtualHost&gt;
    </highlight>
    <p>Detailed list of things that will be enabled by this configuration:</p>
    <ul>
      <li>HTTP/2 negotiation (h2) via TLS ALPN only for the secure <directive>VirtualHost</directive>.</li>
      <li>HTTP 1.1 for both secure and insecure connections (HTTP/2 cleartext negotiation - <code>h2c</code> - is not allowed in this config).</li>
    </ul>
  <p><strong>Please note</strong>: the <directive module="mod_ssl">SSLCipherSuite</directive> needs to be configured with a strong TLS cipher suite. The current version of mod_http2 does not enforce any cipher but most clients do so. Pointing a browser to a <code>h2</code> enabled server with a inappropriate cipher suite will force it to simply refuse and fall back to HTTP 1.1. This is a common mistake that is done while configuring httpd for HTTP/2 the first time, so please keep it in mind to avoid long debugging sessions! If you want to be sure about the cipher suite to choose please avoid the ones listed in the <a href="http://httpwg.org/specs/rfc7540.html#BadCipherSuites">HTTP/2 TLS blacklist</a>.</p>
  </section>
  </section>

  <section id="module-configuration">
    <title>Module Configuration</title>
    <p>This section should contain examples of mod_http2 configurations.</p>
  </section>

  <section id="browsers">
    <title>Browsers</title>
    <p>Browser support.</p>
  </section>

  <section id="tools">
    <title>Useful tools to debug HTTP/2</title>
    <p><a href="https://curl.haxx.se">curl</a>.</p>
    <p>And for really deep inspection <a href="https://www.wireshark.org">wireshark</a>.</p>
    <p>The <a href="https://nghttp2.org">nghttp2</a> package also includes clients, such as
    <code>nghttp</code> and <code>h2load</code>, the latter one being very useful in putting
    some stress on your server.</p>
    <p>Chrome offers also detailed HTTP/2 logs on its connections via the 
    <a href="chrome://net-internals/#http2">special net-internals page</a>.</p>
  </section>

  <section id="push">
    <title>Server Push</title>
    <p>The HTTP/2 protocol allows the server to PUSH responses to a client it never
    asked for. The tone of the conversation is: &quot;here is a request that you
    never sent and the response to it will arrive soon...&quot;</p>
    <p>But there are restrictions: the client can disable this feature and the
    server may only ever PUSH on a request that came from the client.</p>
    <p>The intention is to allow the server to send resources to the clien that
    it will most likely need: a css or javascript resource that belongs to a html
    page the client requested. A set of images that is referenced by a css, etc.</p>
    <p>The advantage for the client is that it saves the time to send the request which
    may range from a few milli seconds to half a second, depending on where on the 
    globe both are located. The disadvantage is that the client may get sent
    things it already has in its cache. Sure, HTTP/2 allows for the early cancellation
    of such requests, but still there are resources wasted.</p>
    <p>To summarize: there is no one good strategy on how to make best use of this 
    feature of HTTP/2 and everyone is still experimenting. So, how do you experiment
    with it in Apache httpd?</p>
    <p><code>mod_http2</code> inspect response header for <code>Link</code> headers
    in a certain format:</p>
    <highlight language="config">
Link &lt;/xxx.css&gt;;rel=preload, &lt;/xxx.js&gt;; rel=preload
    </highlight>
    <p>If the connection supports PUSH, these two resources will be sent to the
    client. As a web developer, you may set these headers either directly in
    your application response or you configure the server via</p>
    <highlight language="config">
&lt;Location /xxx.html&gt;
    Header add Link "&lt;/xxx.css&gt;;rel=preload"
    Header add Link "&lt;/xxx.js&gt;;rel=preload"
&lt;/Location&gt;
    </highlight>
    <p>If you want to use <code>preload</code> links without triggering a PUSH, you
    can use the <code>nopush</code> parameter, as in</p>
    <highlight language="config">
Link &lt;/xxx.css&gt;;rel=preload;nopush
    </highlight>
    <p>or you may disable PUSHes for your server entirely with the directive</p>
    <highlight language="config">
H2Push Off
    </highlight>
    <p>And there is more:</p>
    <p>The module will keep a diary of what has been PUSHed for each connection
    (hashes of URLs, basically) and will not PUSH the same resource twice. When
    the connection closes, this information is discarded.</p>
    <p>There are people thinking about how a client can tell a server what it
    already has, so PUSHes for those things can be avoided, but this is all
    highly experimental right now.</p>
    <p>Another experimental draft that has been implemented in <code>mod_http2</code>
    is the <a href="https://tools.ietf.org/html/draft-ruellan-http-accept-push-policy-00">
    Accept-Push-Policy Header Field</a> where a client can, for each request, define
    what kind of PUSHes it accepts.</p>
  </section>
  
</manualpage>
